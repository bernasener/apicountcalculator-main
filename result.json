Welcome to API Documentation Assistant - v. 2.21.22
This program aims to analyze HTTP methods from a specific API documentation base URL

{
"basePath": "\/v2",
"paths": {
"\/pet": {
"post": {
"summary": "Add a new pet to the store",
"security": [
{
"petstore_auth": [
"write:pets",
"read:pets"
]
}
],
"produces": [
"application\/json",
"application\/xml"
],
"description": "",
"operationId": "addPet",
"responses": {
"405": {
"description": "Invalid input"
}
},
"parameters": [
{
"schema": {
"$ref": "#\/definitions\/Pet"
},
"in": "body",
"name": "body",
"description": "Pet object that needs to be added to the store",
"required": true
}
],
"tags": [
"pet"
],
"consumes": [
"application\/json",
"application\/xml"
]
},
"put": {
"summary": "Update an existing pet",
"security": [
{
"petstore_auth": [
"write:pets",
"read:pets"
]
}
],
"produces": [
"application\/json",
"application\/xml"
],
"description": "",
"operationId": "updatePet",
"responses": {
"400": {
"description": "Invalid ID supplied"
},
"404": {
"description": "Pet not found"
},
"405": {
"description": "Validation exception"
}
},
"parameters": [
{
"schema": {
"$ref": "#\/definitions\/Pet"
},
"in": "body",
"name": "body",
"description": "Pet object that needs to be added to the store",
"required": true
}
],
"tags": [
"pet"
],
"consumes": [
"application\/json",
"application\/xml"
]
}
},
"\/user\/{username}": {
"get": {
"summary": "Get user by user name",
"produces": [
"application\/json",
"application\/xml"
],
"description": "",
"operationId": "getUserByName",
"responses": {
"200": {
"schema": {
"$ref": "#\/definitions\/User"
},
"description": "successful operation"
},
"400": {
"description": "Invalid username supplied"
},
"404": {
"description": "User not found"
}
},
"parameters": [
{
"in": "path",
"name": "username",
"description": "The name that needs to be fetched. Use user1 for testing. ",
"type": "string",
"required": true
}
],
"tags": [
"user"
]
},
"delete": {
"summary": "Delete user",
"produces": [
"application\/json",
"application\/xml"
],
"description": "This can only be done by the logged in user.",
"operationId": "deleteUser",
"responses": {
"400": {
"description": "Invalid username supplied"
},
"404": {
"description": "User not found"
}
},
"parameters": [
{
"in": "path",
"name": "username",
"description": "The name that needs to be deleted",
"type": "string",
"required": true
}
],
"tags": [
"user"
]
},
"put": {
"summary": "Updated user",
"produces": [
"application\/json",
"application\/xml"
],
"description": "This can only be done by the logged in user.",
"operationId": "updateUser",
"responses": {
"400": {
"description": "Invalid user supplied"
},
"404": {
"description": "User not found"
}
},
"parameters": [
{
"in": "path",
"name": "username",
"description": "name that need to be updated",
"type": "string",
"required": true
},
{
"schema": {
"$ref": "#\/definitions\/User"
},
"in": "body",
"name": "body",
"description": "Updated user object",
"required": true
}
],
"tags": [
"user"
],
"consumes": [
"application\/json"
]
}
},
"\/pet\/findByStatus": {
"get": {
"summary": "Finds Pets by status",
"security": [
{
"petstore_auth": [
"write:pets",
"read:pets"
]
}
],
"produces": [
"application\/json",
"application\/xml"
],
"description": "Multiple status values can be provided with comma separated strings",
"operationId": "findPetsByStatus",
"responses": {
"200": {
"schema": {
"type": "array",
"items": {
"$ref": "#\/definitions\/Pet"
}
},
"description": "successful operation"
},
"400": {
"description": "Invalid status value"
}
},
"parameters": [
{
"in": "query",
"name": "status",
"description": "Status values that need to be considered for filter",
"type": "array",
"items": {
"default": "available",
"type": "string",
"enum": [
"available",
"pending",
"sold"
]
},
"collectionFormat": "multi",
"required": true
}
],
"tags": [
"pet"
]
}
},
"\/user\/createWithList": {
"post": {
"summary": "Creates list of users with given input array",
"produces": [
"application\/json",
"application\/xml"
],
"description": "",
"operationId": "createUsersWithListInput",
"responses": {
"default": {
"description": "successful operation"
}
},
"parameters": [
{
"schema": {
"type": "array",
"items": {
"$ref": "#\/definitions\/User"
}
},
"in": "body",
"name": "body",
"description": "List of user object",
"required": true
}
],
"tags": [
"user"
],
"consumes": [
"application\/json"
]
}
},
"\/pet\/{petId}\/uploadImage": {
"post": {
"summary": "uploads an image",
"security": [
{
"petstore_auth": [
"write:pets",
"read:pets"
]
}
],
"produces": [
"application\/json"
],
"description": "",
"operationId": "uploadFile",
"responses": {
"200": {
"schema": {
"$ref": "#\/definitions\/ApiResponse"
},
"description": "successful operation"
}
},
"parameters": [
{
"in": "path",
"name": "petId",
"format": "int64",
"description": "ID of pet to update",
"type": "integer",
"required": true
},
{
"in": "formData",
"name": "additionalMetadata",
"description": "Additional data to pass to server",
"type": "string",
"required": false
},
{
"in": "formData",
"name": "file",
"description": "file to upload",
"type": "file",
"required": false
}
],
"tags": [
"pet"
],
"consumes": [
"multipart\/form-data"
]
}
},
"\/store\/inventory": {
"get": {
"summary": "Returns pet inventories by status",
"security": [
{
"api_key": []
}
],
"produces": [
"application\/json"
],
"description": "Returns a map of status codes to quantities",
"operationId": "getInventory",
"responses": {
"200": {
"schema": {
"additionalProperties": {
"format": "int32",
"type": "integer"
},
"type": "object"
},
"description": "successful operation"
}
},
"parameters": [],
"tags": [
"store"
]
}
},
"\/user\/login": {
"get": {
"summary": "Logs user into the system",
"produces": [
"application\/json",
"application\/xml"
],
"description": "",
"operationId": "loginUser",
"responses": {
"200": {
"schema": {
"type": "string"
},
"headers": {
"X-Rate-Limit": {
"format": "int32",
"description": "calls per hour allowed by the user",
"type": "integer"
},
"X-Expires-After": {
"format": "date-time",
"description": "date in UTC when token expires",
"type": "string"
}
},
"description": "successful operation"
},
"400": {
"description": "Invalid username\/password supplied"
}
},
"parameters": [
{
"in": "query",
"name": "username",
"description": "The user name for login",
"type": "string",
"required": true
},
{
"in": "query",
"name": "password",
"description": "The password for login in clear text",
"type": "string",
"required": true
}
],
"tags": [
"user"
]
}
},
"\/user": {
"post": {
"summary": "Create user",
"produces": [
"application\/json",
"application\/xml"
],
"description": "This can only be done by the logged in user.",
"operationId": "createUser",
"responses": {
"default": {
"description": "successful operation"
}
},
"parameters": [
{
"schema": {
"$ref": "#\/definitions\/User"
},
"in": "body",
"name": "body",
"description": "Created user object",
"required": true
}
],
"tags": [
"user"
],
"consumes": [
"application\/json"
]
}
},
"\/user\/createWithArray": {
"post": {
"summary": "Creates list of users with given input array",
"produces": [
"application\/json",
"application\/xml"
],
"description": "",
"operationId": "createUsersWithArrayInput",
"responses": {
"default": {
"description": "successful operation"
}
},
"parameters": [
{
"schema": {
"type": "array",
"items": {
"$ref": "#\/definitions\/User"
}
},
"in": "body",
"name": "body",
"description": "List of user object",
"required": true
}
],
"tags": [
"user"
],
"consumes": [
"application\/json"
]
}
},
"\/pet\/findByTags": {
"get": {
"summary": "Finds Pets by tags",
"security": [
{
"petstore_auth": [
"write:pets",
"read:pets"
]
}
],
"deprecated": true,
"produces": [
"application\/json",
"application\/xml"
],
"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
"operationId": "findPetsByTags",
"responses": {
"200": {
"schema": {
"type": "array",
"items": {
"$ref": "#\/definitions\/Pet"
}
},
"description": "successful operation"
},
"400": {
"description": "Invalid tag value"
}
},
"parameters": [
{
"in": "query",
"name": "tags",
"description": "Tags to filter by",
"type": "array",
"items": {
"type": "string"
},
"collectionFormat": "multi",
"required": true
}
],
"tags": [
"pet"
]
}
},
"\/store\/order": {
"post": {
"summary": "Place an order for a pet",
"produces": [
"application\/json",
"application\/xml"
],
"description": "",
"operationId": "placeOrder",
"responses": {
"200": {
"schema": {
"$ref": "#\/definitions\/Order"
},
"description": "successful operation"
},
"400": {
"description": "Invalid Order"
}
},
"parameters": [
{
"schema": {
"$ref": "#\/definitions\/Order"
},
"in": "body",
"name": "body",
"description": "order placed for purchasing the pet",
"required": true
}
],
"tags": [
"store"
],
"consumes": [
"application\/json"
]
}
},
"\/user\/logout": {
"get": {
"summary": "Logs out current logged in user session",
"produces": [
"application\/json",
"application\/xml"
],
"description": "",
"operationId": "logoutUser",
"responses": {
"default": {
"description": "successful operation"
}
},
"parameters": [],
"tags": [
"user"
]
}
},
"\/pet\/{petId}": {
"post": {
"summary": "Updates a pet in the store with form data",
"security": [
{
"petstore_auth": [
"write:pets",
"read:pets"
]
}
],
"produces": [
"application\/json",
"application\/xml"
],
"description": "",
"operationId": "updatePetWithForm",
"responses": {
"405": {
"description": "Invalid input"
}
},
"parameters": [
{
"in": "path",
"name": "petId",
"format": "int64",
"description": "ID of pet that needs to be updated",
"type": "integer",
"required": true
},
{
"in": "formData",
"name": "name",
"description": "Updated name of the pet",
"type": "string",
"required": false
},
{
"in": "formData",
"name": "status",
"description": "Updated status of the pet",
"type": "string",
"required": false
}
],
"tags": [
"pet"
],
"consumes": [
"application\/x-www-form-urlencoded"
]
},
"get": {
"summary": "Find pet by ID",
"security": [
{
"api_key": []
}
],
"produces": [
"application\/json",
"application\/xml"
],
"description": "Returns a single pet",
"operationId": "getPetById",
"responses": {
"200": {
"schema": {
"$ref": "#\/definitions\/Pet"
},
"description": "successful operation"
},
"400": {
"description": "Invalid ID supplied"
},
"404": {
"description": "Pet not found"
}
},
"parameters": [
{
"in": "path",
"name": "petId",
"format": "int64",
"description": "ID of pet to return",
"type": "integer",
"required": true
}
],
"tags": [
"pet"
]
},
"delete": {
"summary": "Deletes a pet",
"security": [
{
"petstore_auth": [
"write:pets",
"read:pets"
]
}
],
"produces": [
"application\/json",
"application\/xml"
],
"description": "",
"operationId": "deletePet",
"responses": {
"400": {
"description": "Invalid ID supplied"
},
"404": {
"description": "Pet not found"
}
},
"parameters": [
{
"in": "header",
"name": "api_key",
"type": "string",
"required": false
},
{
"in": "path",
"name": "petId",
"format": "int64",
"description": "Pet id to delete",
"type": "integer",
"required": true
}
],
"tags": [
"pet"
]
}
},
"\/store\/order\/{orderId}": {
"get": {
"summary": "Find purchase order by ID",
"produces": [
"application\/json",
"application\/xml"
],
"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
"operationId": "getOrderById",
"responses": {
"200": {
"schema": {
"$ref": "#\/definitions\/Order"
},
"description": "successful operation"
},
"400": {
"description": "Invalid ID supplied"
},
"404": {
"description": "Order not found"
}
},
"parameters": [
{
"in": "path",
"name": "orderId",
"format": "int64",
"description": "ID of pet that needs to be fetched",
"maximum": 10,
"type": "integer",
"minimum": 1,
"required": true
}
],
"tags": [
"store"
]
},
"delete": {
"summary": "Delete purchase order by ID",
"produces": [
"application\/json",
"application\/xml"
],
"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
"operationId": "deleteOrder",
"responses": {
"400": {
"description": "Invalid ID supplied"
},
"404": {
"description": "Order not found"
}
},
"parameters": [
{
"in": "path",
"name": "orderId",
"format": "int64",
"description": "ID of the order that needs to be deleted",
"type": "integer",
"minimum": 1,
"required": true
}
],
"tags": [
"store"
]
}
}
},
"host": "petstore.swagger.io",
"schemes": [
"https",
"http"
],
"externalDocs": {
"description": "Find out more about Swagger",
"url": "http:\/\/swagger.io"
},
"securityDefinitions": {
"petstore_auth": {
"authorizationUrl": "https:\/\/petstore.swagger.io\/oauth\/authorize",
"scopes": {
"write:pets": "modify pets in your account",
"read:pets": "read your pets"
},
"type": "oauth2",
"flow": "implicit"
},
"api_key": {
"in": "header",
"name": "api_key",
"type": "apiKey"
}
},
"definitions": {
"Order": {
"xml": {
"name": "Order"
},
"type": "object",
"properties": {
"petId": {
"format": "int64",
"type": "integer"
},
"quantity": {
"format": "int32",
"type": "integer"
},
"id": {
"format": "int64",
"type": "integer"
},
"shipDate": {
"format": "date-time",
"type": "string"
},
"complete": {
"type": "boolean"
},
"status": {
"description": "Order Status",
"type": "string",
"enum": [
"placed",
"approved",
"delivered"
]
}
}
},
"Category": {
"xml": {
"name": "Category"
},
"type": "object",
"properties": {
"name": {
"type": "string"
},
"id": {
"format": "int64",
"type": "integer"
}
}
},
"User": {
"xml": {
"name": "User"
},
"type": "object",
"properties": {
"firstName": {
"type": "string"
},
"lastName": {
"type": "string"
},
"password": {
"type": "string"
},
"userStatus": {
"format": "int32",
"description": "User Status",
"type": "integer"
},
"phone": {
"type": "string"
},
"id": {
"format": "int64",
"type": "integer"
},
"email": {
"type": "string"
},
"username": {
"type": "string"
}
}
},
"Tag": {
"xml": {
"name": "Tag"
},
"type": "object",
"properties": {
"name": {
"type": "string"
},
"id": {
"format": "int64",
"type": "integer"
}
}
},
"Pet": {
"xml": {
"name": "Pet"
},
"type": "object",
"required": [
"name",
"photoUrls"
],
"properties": {
"photoUrls": {
"xml": {
"wrapped": true
},
"type": "array",
"items": {
"xml": {
"name": "photoUrl"
},
"type": "string"
}
},
"name": {
"type": "string",
"example": "doggie"
},
"id": {
"format": "int64",
"type": "integer"
},
"category": {
"$ref": "#\/definitions\/Category"
},
"tags": {
"xml": {
"wrapped": true
},
"type": "array",
"items": {
"xml": {
"name": "tag"
},
"$ref": "#\/definitions\/Tag"
}
},
"status": {
"description": "pet status in the store",
"type": "string",
"enum": [
"available",
"pending",
"sold"
]
}
}
},
"ApiResponse": {
"type": "object",
"properties": {
"code": {
"format": "int32",
"type": "integer"
},
"type": {
"type": "string"
},
"message": {
"type": "string"
}
}
}
},
"swagger": "2.0",
"info": {
"license": {
"name": "Apache 2.0",
"url": "http:\/\/www.apache.org\/licenses\/LICENSE-2.0.html"
},
"contact": {
"email": "apiteam@swagger.io"
},
"description": "This is a sample server Petstore server. You can find out more about Swagger at [http:\/\/swagger.io](http:\/\/swagger.io) or on [irc.freenode.net, #swagger](http:\/\/swagger.io\/irc\/). For this sample, you can use the api key `special-key` to test the authorization filters.",
"termsOfService": "http:\/\/swagger.io\/terms\/",
"title": "Swagger Petstore",
"version": "1.0.6"
},
"tags": [
{
"name": "pet",
"description": "Everything about your Pets",
"externalDocs": {
"description": "Find out more",
"url": "http:\/\/swagger.io"
}
},
{
"name": "store",
"description": "Access to Petstore orders"
},
{
"name": "user",
"description": "Operations about user",
"externalDocs": {
"description": "Find out more about our store",
"url": "http:\/\/swagger.io"
}
}
]
}

1.
API: /pet
HTTP Method: post
Summary: "Add a new pet to the store",
Deprecation: false
--------------------------------------------------
2.
API: /pet
HTTP Method: put
Summary: "Update an existing pet",
Deprecation: false
--------------------------------------------------
3.
API: /user/{username}
HTTP Method: get
Summary: "Get user by user name",
Deprecation: false
--------------------------------------------------
4.
API: /user/{username}
HTTP Method: delete
Summary: "Delete user",
Deprecation: false
--------------------------------------------------
5.
API: /user/{username}
HTTP Method: put
Summary: "Updated user",
Deprecation: false
--------------------------------------------------
6.
API: /pet/findByStatus
HTTP Method: get
Summary: "Finds Pets by status",
Deprecation: false
--------------------------------------------------
7.
API: /user/createWithList
HTTP Method: post
Summary: "Creates list of users with given input array",
Deprecation: false
--------------------------------------------------
8.
API: /pet/{petId}/uploadImage
HTTP Method: post
Summary: "uploads an image",
Deprecation: false
--------------------------------------------------
9.
API: /store/inventory
HTTP Method: get
Summary: "Returns pet inventories by status",
Deprecation: false
--------------------------------------------------
10.
API: /user/login
HTTP Method: get
Summary: "Logs user into the system",
Deprecation: false
--------------------------------------------------
11.
API: /user
HTTP Method: post
Summary: "Create user",
Deprecation: false
--------------------------------------------------
12.
API: /user/createWithArray
HTTP Method: post
Summary: "Creates list of users with given input array",
Deprecation: false
--------------------------------------------------
13.
API: /pet/findByTags
HTTP Method: get
Summary: "Finds Pets by tags",
Deprecation: true
--------------------------------------------------
14.
API: /store/order
HTTP Method: post
Summary: "Place an order for a pet",
Deprecation: false
--------------------------------------------------
15.
API: /user/logout
HTTP Method: get
Summary: "Logs out current logged in user session",
Deprecation: false
--------------------------------------------------
16.
API: /pet/{petId}
HTTP Method: post
Summary: "Updates a pet in the store with form data",
Deprecation: false
--------------------------------------------------
17.
API: /pet/{petId}
HTTP Method: get
Summary: "Find pet by ID",
Deprecation: false
--------------------------------------------------
18.
API: /pet/{petId}
HTTP Method: delete
Summary: "Deletes a pet",
Deprecation: false
--------------------------------------------------
19.
API: /store/order/{orderId}
HTTP Method: get
Summary: "Find purchase order by ID",
Deprecation: false
--------------------------------------------------
20.
API: /store/order/{orderId}
HTTP Method: delete
Summary: "Delete purchase order by ID",
Deprecation: false
--------------------------------------------------

//////////////////////////////////////////////////
Total active HTTP methods reside in this API is: 19
